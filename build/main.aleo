import credits.aleo;
program aleo_name_service_v3.aleo;


struct Name:
    data1 as u128;
    data2 as u128;
    data3 as u128;
    data4 as u128;

struct BaseURI:
    data0 as u128;
    data1 as u128;
    data2 as u128;
    data3 as u128;

struct ResolverIndex:
    name as field;
    category as u128;

struct TokenId:
    data1 as u128;
    data2 as u128;
    data3 as u128;
    data4 as u128;
    parent as field;

record NFT:
    owner as address.private;
    data as TokenId.private;
    edition as scalar.private;


mapping nft_owners:
	key left as field.public;
	value right as address.public;


mapping names:
	key left as field.public;
	value right as TokenId.public;


mapping primary_names:
	key left as address.public;
	value right as field.public;


mapping resolvers:
	key left as ResolverIndex.public;
	value right as Name.public;


mapping general_settings:
	key left as u8.public;
	value right as u128.public;


mapping toggle_settings:
	key left as u8.public;
	value right as u32.public;



closure validate_name:
    input r0 as Name;
    add r0.data1 r0.data2 into r1;
    add r1 r0.data3 into r2;
    add r2 r0.data4 into r3;
    is.neq r3 0u128 into r4;
    assert.eq r4 true;
    mul 0u8 8u8 into r5;
    shr r0.data1 r5 into r6;
    and r6 255u128 into r7;
    is.eq r7 0u128 into r8;
    is.eq r7 45u128 into r9;
    or r8 r9 into r10;
    is.eq r7 95u128 into r11;
    or r10 r11 into r12;
    gte r7 48u128 into r13;
    lte r7 57u128 into r14;
    and r13 r14 into r15;
    or r12 r15 into r16;
    gte r7 97u128 into r17;
    lte r7 122u128 into r18;
    and r17 r18 into r19;
    or r16 r19 into r20;
    not r20 into r21;
    mul 1u8 8u8 into r22;
    shr r0.data1 r22 into r23;
    and r23 255u128 into r24;
    is.eq r24 0u128 into r25;
    is.eq r24 45u128 into r26;
    or r25 r26 into r27;
    is.eq r24 95u128 into r28;
    or r27 r28 into r29;
    gte r24 48u128 into r30;
    lte r24 57u128 into r31;
    and r30 r31 into r32;
    or r29 r32 into r33;
    gte r24 97u128 into r34;
    lte r24 122u128 into r35;
    and r34 r35 into r36;
    or r33 r36 into r37;
    not r37 into r38;
    mul 2u8 8u8 into r39;
    shr r0.data1 r39 into r40;
    and r40 255u128 into r41;
    is.eq r41 0u128 into r42;
    is.eq r41 45u128 into r43;
    or r42 r43 into r44;
    is.eq r41 95u128 into r45;
    or r44 r45 into r46;
    gte r41 48u128 into r47;
    lte r41 57u128 into r48;
    and r47 r48 into r49;
    or r46 r49 into r50;
    gte r41 97u128 into r51;
    lte r41 122u128 into r52;
    and r51 r52 into r53;
    or r50 r53 into r54;
    not r54 into r55;
    mul 3u8 8u8 into r56;
    shr r0.data1 r56 into r57;
    and r57 255u128 into r58;
    is.eq r58 0u128 into r59;
    is.eq r58 45u128 into r60;
    or r59 r60 into r61;
    is.eq r58 95u128 into r62;
    or r61 r62 into r63;
    gte r58 48u128 into r64;
    lte r58 57u128 into r65;
    and r64 r65 into r66;
    or r63 r66 into r67;
    gte r58 97u128 into r68;
    lte r58 122u128 into r69;
    and r68 r69 into r70;
    or r67 r70 into r71;
    not r71 into r72;
    mul 4u8 8u8 into r73;
    shr r0.data1 r73 into r74;
    and r74 255u128 into r75;
    is.eq r75 0u128 into r76;
    is.eq r75 45u128 into r77;
    or r76 r77 into r78;
    is.eq r75 95u128 into r79;
    or r78 r79 into r80;
    gte r75 48u128 into r81;
    lte r75 57u128 into r82;
    and r81 r82 into r83;
    or r80 r83 into r84;
    gte r75 97u128 into r85;
    lte r75 122u128 into r86;
    and r85 r86 into r87;
    or r84 r87 into r88;
    not r88 into r89;
    mul 5u8 8u8 into r90;
    shr r0.data1 r90 into r91;
    and r91 255u128 into r92;
    is.eq r92 0u128 into r93;
    is.eq r92 45u128 into r94;
    or r93 r94 into r95;
    is.eq r92 95u128 into r96;
    or r95 r96 into r97;
    gte r92 48u128 into r98;
    lte r92 57u128 into r99;
    and r98 r99 into r100;
    or r97 r100 into r101;
    gte r92 97u128 into r102;
    lte r92 122u128 into r103;
    and r102 r103 into r104;
    or r101 r104 into r105;
    not r105 into r106;
    mul 6u8 8u8 into r107;
    shr r0.data1 r107 into r108;
    and r108 255u128 into r109;
    is.eq r109 0u128 into r110;
    is.eq r109 45u128 into r111;
    or r110 r111 into r112;
    is.eq r109 95u128 into r113;
    or r112 r113 into r114;
    gte r109 48u128 into r115;
    lte r109 57u128 into r116;
    and r115 r116 into r117;
    or r114 r117 into r118;
    gte r109 97u128 into r119;
    lte r109 122u128 into r120;
    and r119 r120 into r121;
    or r118 r121 into r122;
    not r122 into r123;
    mul 7u8 8u8 into r124;
    shr r0.data1 r124 into r125;
    and r125 255u128 into r126;
    is.eq r126 0u128 into r127;
    is.eq r126 45u128 into r128;
    or r127 r128 into r129;
    is.eq r126 95u128 into r130;
    or r129 r130 into r131;
    gte r126 48u128 into r132;
    lte r126 57u128 into r133;
    and r132 r133 into r134;
    or r131 r134 into r135;
    gte r126 97u128 into r136;
    lte r126 122u128 into r137;
    and r136 r137 into r138;
    or r135 r138 into r139;
    not r139 into r140;
    mul 8u8 8u8 into r141;
    shr r0.data1 r141 into r142;
    and r142 255u128 into r143;
    is.eq r143 0u128 into r144;
    is.eq r143 45u128 into r145;
    or r144 r145 into r146;
    is.eq r143 95u128 into r147;
    or r146 r147 into r148;
    gte r143 48u128 into r149;
    lte r143 57u128 into r150;
    and r149 r150 into r151;
    or r148 r151 into r152;
    gte r143 97u128 into r153;
    lte r143 122u128 into r154;
    and r153 r154 into r155;
    or r152 r155 into r156;
    not r156 into r157;
    mul 9u8 8u8 into r158;
    shr r0.data1 r158 into r159;
    and r159 255u128 into r160;
    is.eq r160 0u128 into r161;
    is.eq r160 45u128 into r162;
    or r161 r162 into r163;
    is.eq r160 95u128 into r164;
    or r163 r164 into r165;
    gte r160 48u128 into r166;
    lte r160 57u128 into r167;
    and r166 r167 into r168;
    or r165 r168 into r169;
    gte r160 97u128 into r170;
    lte r160 122u128 into r171;
    and r170 r171 into r172;
    or r169 r172 into r173;
    not r173 into r174;
    mul 10u8 8u8 into r175;
    shr r0.data1 r175 into r176;
    and r176 255u128 into r177;
    is.eq r177 0u128 into r178;
    is.eq r177 45u128 into r179;
    or r178 r179 into r180;
    is.eq r177 95u128 into r181;
    or r180 r181 into r182;
    gte r177 48u128 into r183;
    lte r177 57u128 into r184;
    and r183 r184 into r185;
    or r182 r185 into r186;
    gte r177 97u128 into r187;
    lte r177 122u128 into r188;
    and r187 r188 into r189;
    or r186 r189 into r190;
    not r190 into r191;
    mul 11u8 8u8 into r192;
    shr r0.data1 r192 into r193;
    and r193 255u128 into r194;
    is.eq r194 0u128 into r195;
    is.eq r194 45u128 into r196;
    or r195 r196 into r197;
    is.eq r194 95u128 into r198;
    or r197 r198 into r199;
    gte r194 48u128 into r200;
    lte r194 57u128 into r201;
    and r200 r201 into r202;
    or r199 r202 into r203;
    gte r194 97u128 into r204;
    lte r194 122u128 into r205;
    and r204 r205 into r206;
    or r203 r206 into r207;
    not r207 into r208;
    mul 12u8 8u8 into r209;
    shr r0.data1 r209 into r210;
    and r210 255u128 into r211;
    is.eq r211 0u128 into r212;
    is.eq r211 45u128 into r213;
    or r212 r213 into r214;
    is.eq r211 95u128 into r215;
    or r214 r215 into r216;
    gte r211 48u128 into r217;
    lte r211 57u128 into r218;
    and r217 r218 into r219;
    or r216 r219 into r220;
    gte r211 97u128 into r221;
    lte r211 122u128 into r222;
    and r221 r222 into r223;
    or r220 r223 into r224;
    not r224 into r225;
    mul 13u8 8u8 into r226;
    shr r0.data1 r226 into r227;
    and r227 255u128 into r228;
    is.eq r228 0u128 into r229;
    is.eq r228 45u128 into r230;
    or r229 r230 into r231;
    is.eq r228 95u128 into r232;
    or r231 r232 into r233;
    gte r228 48u128 into r234;
    lte r228 57u128 into r235;
    and r234 r235 into r236;
    or r233 r236 into r237;
    gte r228 97u128 into r238;
    lte r228 122u128 into r239;
    and r238 r239 into r240;
    or r237 r240 into r241;
    not r241 into r242;
    mul 14u8 8u8 into r243;
    shr r0.data1 r243 into r244;
    and r244 255u128 into r245;
    is.eq r245 0u128 into r246;
    is.eq r245 45u128 into r247;
    or r246 r247 into r248;
    is.eq r245 95u128 into r249;
    or r248 r249 into r250;
    gte r245 48u128 into r251;
    lte r245 57u128 into r252;
    and r251 r252 into r253;
    or r250 r253 into r254;
    gte r245 97u128 into r255;
    lte r245 122u128 into r256;
    and r255 r256 into r257;
    or r254 r257 into r258;
    not r258 into r259;
    mul 15u8 8u8 into r260;
    shr r0.data1 r260 into r261;
    and r261 255u128 into r262;
    is.eq r262 0u128 into r263;
    is.eq r262 45u128 into r264;
    or r263 r264 into r265;
    is.eq r262 95u128 into r266;
    or r265 r266 into r267;
    gte r262 48u128 into r268;
    lte r262 57u128 into r269;
    and r268 r269 into r270;
    or r267 r270 into r271;
    gte r262 97u128 into r272;
    lte r262 122u128 into r273;
    and r272 r273 into r274;
    or r271 r274 into r275;
    not r275 into r276;
    ternary r276 false true into r277;
    ternary r259 false r277 into r278;
    ternary r242 false r278 into r279;
    ternary r225 false r279 into r280;
    ternary r208 false r280 into r281;
    ternary r191 false r281 into r282;
    ternary r174 false r282 into r283;
    ternary r157 false r283 into r284;
    ternary r140 false r284 into r285;
    ternary r123 false r285 into r286;
    ternary r106 false r286 into r287;
    ternary r89 false r287 into r288;
    ternary r72 false r288 into r289;
    ternary r55 false r289 into r290;
    ternary r38 false r290 into r291;
    ternary r21 false r291 into r292;
    mul 0u8 8u8 into r293;
    shr r0.data2 r293 into r294;
    and r294 255u128 into r295;
    is.eq r295 0u128 into r296;
    is.eq r295 45u128 into r297;
    or r296 r297 into r298;
    is.eq r295 95u128 into r299;
    or r298 r299 into r300;
    gte r295 48u128 into r301;
    lte r295 57u128 into r302;
    and r301 r302 into r303;
    or r300 r303 into r304;
    gte r295 97u128 into r305;
    lte r295 122u128 into r306;
    and r305 r306 into r307;
    or r304 r307 into r308;
    not r308 into r309;
    mul 1u8 8u8 into r310;
    shr r0.data2 r310 into r311;
    and r311 255u128 into r312;
    is.eq r312 0u128 into r313;
    is.eq r312 45u128 into r314;
    or r313 r314 into r315;
    is.eq r312 95u128 into r316;
    or r315 r316 into r317;
    gte r312 48u128 into r318;
    lte r312 57u128 into r319;
    and r318 r319 into r320;
    or r317 r320 into r321;
    gte r312 97u128 into r322;
    lte r312 122u128 into r323;
    and r322 r323 into r324;
    or r321 r324 into r325;
    not r325 into r326;
    mul 2u8 8u8 into r327;
    shr r0.data2 r327 into r328;
    and r328 255u128 into r329;
    is.eq r329 0u128 into r330;
    is.eq r329 45u128 into r331;
    or r330 r331 into r332;
    is.eq r329 95u128 into r333;
    or r332 r333 into r334;
    gte r329 48u128 into r335;
    lte r329 57u128 into r336;
    and r335 r336 into r337;
    or r334 r337 into r338;
    gte r329 97u128 into r339;
    lte r329 122u128 into r340;
    and r339 r340 into r341;
    or r338 r341 into r342;
    not r342 into r343;
    mul 3u8 8u8 into r344;
    shr r0.data2 r344 into r345;
    and r345 255u128 into r346;
    is.eq r346 0u128 into r347;
    is.eq r346 45u128 into r348;
    or r347 r348 into r349;
    is.eq r346 95u128 into r350;
    or r349 r350 into r351;
    gte r346 48u128 into r352;
    lte r346 57u128 into r353;
    and r352 r353 into r354;
    or r351 r354 into r355;
    gte r346 97u128 into r356;
    lte r346 122u128 into r357;
    and r356 r357 into r358;
    or r355 r358 into r359;
    not r359 into r360;
    mul 4u8 8u8 into r361;
    shr r0.data2 r361 into r362;
    and r362 255u128 into r363;
    is.eq r363 0u128 into r364;
    is.eq r363 45u128 into r365;
    or r364 r365 into r366;
    is.eq r363 95u128 into r367;
    or r366 r367 into r368;
    gte r363 48u128 into r369;
    lte r363 57u128 into r370;
    and r369 r370 into r371;
    or r368 r371 into r372;
    gte r363 97u128 into r373;
    lte r363 122u128 into r374;
    and r373 r374 into r375;
    or r372 r375 into r376;
    not r376 into r377;
    mul 5u8 8u8 into r378;
    shr r0.data2 r378 into r379;
    and r379 255u128 into r380;
    is.eq r380 0u128 into r381;
    is.eq r380 45u128 into r382;
    or r381 r382 into r383;
    is.eq r380 95u128 into r384;
    or r383 r384 into r385;
    gte r380 48u128 into r386;
    lte r380 57u128 into r387;
    and r386 r387 into r388;
    or r385 r388 into r389;
    gte r380 97u128 into r390;
    lte r380 122u128 into r391;
    and r390 r391 into r392;
    or r389 r392 into r393;
    not r393 into r394;
    mul 6u8 8u8 into r395;
    shr r0.data2 r395 into r396;
    and r396 255u128 into r397;
    is.eq r397 0u128 into r398;
    is.eq r397 45u128 into r399;
    or r398 r399 into r400;
    is.eq r397 95u128 into r401;
    or r400 r401 into r402;
    gte r397 48u128 into r403;
    lte r397 57u128 into r404;
    and r403 r404 into r405;
    or r402 r405 into r406;
    gte r397 97u128 into r407;
    lte r397 122u128 into r408;
    and r407 r408 into r409;
    or r406 r409 into r410;
    not r410 into r411;
    mul 7u8 8u8 into r412;
    shr r0.data2 r412 into r413;
    and r413 255u128 into r414;
    is.eq r414 0u128 into r415;
    is.eq r414 45u128 into r416;
    or r415 r416 into r417;
    is.eq r414 95u128 into r418;
    or r417 r418 into r419;
    gte r414 48u128 into r420;
    lte r414 57u128 into r421;
    and r420 r421 into r422;
    or r419 r422 into r423;
    gte r414 97u128 into r424;
    lte r414 122u128 into r425;
    and r424 r425 into r426;
    or r423 r426 into r427;
    not r427 into r428;
    mul 8u8 8u8 into r429;
    shr r0.data2 r429 into r430;
    and r430 255u128 into r431;
    is.eq r431 0u128 into r432;
    is.eq r431 45u128 into r433;
    or r432 r433 into r434;
    is.eq r431 95u128 into r435;
    or r434 r435 into r436;
    gte r431 48u128 into r437;
    lte r431 57u128 into r438;
    and r437 r438 into r439;
    or r436 r439 into r440;
    gte r431 97u128 into r441;
    lte r431 122u128 into r442;
    and r441 r442 into r443;
    or r440 r443 into r444;
    not r444 into r445;
    mul 9u8 8u8 into r446;
    shr r0.data2 r446 into r447;
    and r447 255u128 into r448;
    is.eq r448 0u128 into r449;
    is.eq r448 45u128 into r450;
    or r449 r450 into r451;
    is.eq r448 95u128 into r452;
    or r451 r452 into r453;
    gte r448 48u128 into r454;
    lte r448 57u128 into r455;
    and r454 r455 into r456;
    or r453 r456 into r457;
    gte r448 97u128 into r458;
    lte r448 122u128 into r459;
    and r458 r459 into r460;
    or r457 r460 into r461;
    not r461 into r462;
    mul 10u8 8u8 into r463;
    shr r0.data2 r463 into r464;
    and r464 255u128 into r465;
    is.eq r465 0u128 into r466;
    is.eq r465 45u128 into r467;
    or r466 r467 into r468;
    is.eq r465 95u128 into r469;
    or r468 r469 into r470;
    gte r465 48u128 into r471;
    lte r465 57u128 into r472;
    and r471 r472 into r473;
    or r470 r473 into r474;
    gte r465 97u128 into r475;
    lte r465 122u128 into r476;
    and r475 r476 into r477;
    or r474 r477 into r478;
    not r478 into r479;
    mul 11u8 8u8 into r480;
    shr r0.data2 r480 into r481;
    and r481 255u128 into r482;
    is.eq r482 0u128 into r483;
    is.eq r482 45u128 into r484;
    or r483 r484 into r485;
    is.eq r482 95u128 into r486;
    or r485 r486 into r487;
    gte r482 48u128 into r488;
    lte r482 57u128 into r489;
    and r488 r489 into r490;
    or r487 r490 into r491;
    gte r482 97u128 into r492;
    lte r482 122u128 into r493;
    and r492 r493 into r494;
    or r491 r494 into r495;
    not r495 into r496;
    mul 12u8 8u8 into r497;
    shr r0.data2 r497 into r498;
    and r498 255u128 into r499;
    is.eq r499 0u128 into r500;
    is.eq r499 45u128 into r501;
    or r500 r501 into r502;
    is.eq r499 95u128 into r503;
    or r502 r503 into r504;
    gte r499 48u128 into r505;
    lte r499 57u128 into r506;
    and r505 r506 into r507;
    or r504 r507 into r508;
    gte r499 97u128 into r509;
    lte r499 122u128 into r510;
    and r509 r510 into r511;
    or r508 r511 into r512;
    not r512 into r513;
    mul 13u8 8u8 into r514;
    shr r0.data2 r514 into r515;
    and r515 255u128 into r516;
    is.eq r516 0u128 into r517;
    is.eq r516 45u128 into r518;
    or r517 r518 into r519;
    is.eq r516 95u128 into r520;
    or r519 r520 into r521;
    gte r516 48u128 into r522;
    lte r516 57u128 into r523;
    and r522 r523 into r524;
    or r521 r524 into r525;
    gte r516 97u128 into r526;
    lte r516 122u128 into r527;
    and r526 r527 into r528;
    or r525 r528 into r529;
    not r529 into r530;
    mul 14u8 8u8 into r531;
    shr r0.data2 r531 into r532;
    and r532 255u128 into r533;
    is.eq r533 0u128 into r534;
    is.eq r533 45u128 into r535;
    or r534 r535 into r536;
    is.eq r533 95u128 into r537;
    or r536 r537 into r538;
    gte r533 48u128 into r539;
    lte r533 57u128 into r540;
    and r539 r540 into r541;
    or r538 r541 into r542;
    gte r533 97u128 into r543;
    lte r533 122u128 into r544;
    and r543 r544 into r545;
    or r542 r545 into r546;
    not r546 into r547;
    mul 15u8 8u8 into r548;
    shr r0.data2 r548 into r549;
    and r549 255u128 into r550;
    is.eq r550 0u128 into r551;
    is.eq r550 45u128 into r552;
    or r551 r552 into r553;
    is.eq r550 95u128 into r554;
    or r553 r554 into r555;
    gte r550 48u128 into r556;
    lte r550 57u128 into r557;
    and r556 r557 into r558;
    or r555 r558 into r559;
    gte r550 97u128 into r560;
    lte r550 122u128 into r561;
    and r560 r561 into r562;
    or r559 r562 into r563;
    not r563 into r564;
    ternary r564 false true into r565;
    ternary r547 false r565 into r566;
    ternary r530 false r566 into r567;
    ternary r513 false r567 into r568;
    ternary r496 false r568 into r569;
    ternary r479 false r569 into r570;
    ternary r462 false r570 into r571;
    ternary r445 false r571 into r572;
    ternary r428 false r572 into r573;
    ternary r411 false r573 into r574;
    ternary r394 false r574 into r575;
    ternary r377 false r575 into r576;
    ternary r360 false r576 into r577;
    ternary r343 false r577 into r578;
    ternary r326 false r578 into r579;
    ternary r309 false r579 into r580;
    mul 0u8 8u8 into r581;
    shr r0.data3 r581 into r582;
    and r582 255u128 into r583;
    is.eq r583 0u128 into r584;
    is.eq r583 45u128 into r585;
    or r584 r585 into r586;
    is.eq r583 95u128 into r587;
    or r586 r587 into r588;
    gte r583 48u128 into r589;
    lte r583 57u128 into r590;
    and r589 r590 into r591;
    or r588 r591 into r592;
    gte r583 97u128 into r593;
    lte r583 122u128 into r594;
    and r593 r594 into r595;
    or r592 r595 into r596;
    not r596 into r597;
    mul 1u8 8u8 into r598;
    shr r0.data3 r598 into r599;
    and r599 255u128 into r600;
    is.eq r600 0u128 into r601;
    is.eq r600 45u128 into r602;
    or r601 r602 into r603;
    is.eq r600 95u128 into r604;
    or r603 r604 into r605;
    gte r600 48u128 into r606;
    lte r600 57u128 into r607;
    and r606 r607 into r608;
    or r605 r608 into r609;
    gte r600 97u128 into r610;
    lte r600 122u128 into r611;
    and r610 r611 into r612;
    or r609 r612 into r613;
    not r613 into r614;
    mul 2u8 8u8 into r615;
    shr r0.data3 r615 into r616;
    and r616 255u128 into r617;
    is.eq r617 0u128 into r618;
    is.eq r617 45u128 into r619;
    or r618 r619 into r620;
    is.eq r617 95u128 into r621;
    or r620 r621 into r622;
    gte r617 48u128 into r623;
    lte r617 57u128 into r624;
    and r623 r624 into r625;
    or r622 r625 into r626;
    gte r617 97u128 into r627;
    lte r617 122u128 into r628;
    and r627 r628 into r629;
    or r626 r629 into r630;
    not r630 into r631;
    mul 3u8 8u8 into r632;
    shr r0.data3 r632 into r633;
    and r633 255u128 into r634;
    is.eq r634 0u128 into r635;
    is.eq r634 45u128 into r636;
    or r635 r636 into r637;
    is.eq r634 95u128 into r638;
    or r637 r638 into r639;
    gte r634 48u128 into r640;
    lte r634 57u128 into r641;
    and r640 r641 into r642;
    or r639 r642 into r643;
    gte r634 97u128 into r644;
    lte r634 122u128 into r645;
    and r644 r645 into r646;
    or r643 r646 into r647;
    not r647 into r648;
    mul 4u8 8u8 into r649;
    shr r0.data3 r649 into r650;
    and r650 255u128 into r651;
    is.eq r651 0u128 into r652;
    is.eq r651 45u128 into r653;
    or r652 r653 into r654;
    is.eq r651 95u128 into r655;
    or r654 r655 into r656;
    gte r651 48u128 into r657;
    lte r651 57u128 into r658;
    and r657 r658 into r659;
    or r656 r659 into r660;
    gte r651 97u128 into r661;
    lte r651 122u128 into r662;
    and r661 r662 into r663;
    or r660 r663 into r664;
    not r664 into r665;
    mul 5u8 8u8 into r666;
    shr r0.data3 r666 into r667;
    and r667 255u128 into r668;
    is.eq r668 0u128 into r669;
    is.eq r668 45u128 into r670;
    or r669 r670 into r671;
    is.eq r668 95u128 into r672;
    or r671 r672 into r673;
    gte r668 48u128 into r674;
    lte r668 57u128 into r675;
    and r674 r675 into r676;
    or r673 r676 into r677;
    gte r668 97u128 into r678;
    lte r668 122u128 into r679;
    and r678 r679 into r680;
    or r677 r680 into r681;
    not r681 into r682;
    mul 6u8 8u8 into r683;
    shr r0.data3 r683 into r684;
    and r684 255u128 into r685;
    is.eq r685 0u128 into r686;
    is.eq r685 45u128 into r687;
    or r686 r687 into r688;
    is.eq r685 95u128 into r689;
    or r688 r689 into r690;
    gte r685 48u128 into r691;
    lte r685 57u128 into r692;
    and r691 r692 into r693;
    or r690 r693 into r694;
    gte r685 97u128 into r695;
    lte r685 122u128 into r696;
    and r695 r696 into r697;
    or r694 r697 into r698;
    not r698 into r699;
    mul 7u8 8u8 into r700;
    shr r0.data3 r700 into r701;
    and r701 255u128 into r702;
    is.eq r702 0u128 into r703;
    is.eq r702 45u128 into r704;
    or r703 r704 into r705;
    is.eq r702 95u128 into r706;
    or r705 r706 into r707;
    gte r702 48u128 into r708;
    lte r702 57u128 into r709;
    and r708 r709 into r710;
    or r707 r710 into r711;
    gte r702 97u128 into r712;
    lte r702 122u128 into r713;
    and r712 r713 into r714;
    or r711 r714 into r715;
    not r715 into r716;
    mul 8u8 8u8 into r717;
    shr r0.data3 r717 into r718;
    and r718 255u128 into r719;
    is.eq r719 0u128 into r720;
    is.eq r719 45u128 into r721;
    or r720 r721 into r722;
    is.eq r719 95u128 into r723;
    or r722 r723 into r724;
    gte r719 48u128 into r725;
    lte r719 57u128 into r726;
    and r725 r726 into r727;
    or r724 r727 into r728;
    gte r719 97u128 into r729;
    lte r719 122u128 into r730;
    and r729 r730 into r731;
    or r728 r731 into r732;
    not r732 into r733;
    mul 9u8 8u8 into r734;
    shr r0.data3 r734 into r735;
    and r735 255u128 into r736;
    is.eq r736 0u128 into r737;
    is.eq r736 45u128 into r738;
    or r737 r738 into r739;
    is.eq r736 95u128 into r740;
    or r739 r740 into r741;
    gte r736 48u128 into r742;
    lte r736 57u128 into r743;
    and r742 r743 into r744;
    or r741 r744 into r745;
    gte r736 97u128 into r746;
    lte r736 122u128 into r747;
    and r746 r747 into r748;
    or r745 r748 into r749;
    not r749 into r750;
    mul 10u8 8u8 into r751;
    shr r0.data3 r751 into r752;
    and r752 255u128 into r753;
    is.eq r753 0u128 into r754;
    is.eq r753 45u128 into r755;
    or r754 r755 into r756;
    is.eq r753 95u128 into r757;
    or r756 r757 into r758;
    gte r753 48u128 into r759;
    lte r753 57u128 into r760;
    and r759 r760 into r761;
    or r758 r761 into r762;
    gte r753 97u128 into r763;
    lte r753 122u128 into r764;
    and r763 r764 into r765;
    or r762 r765 into r766;
    not r766 into r767;
    mul 11u8 8u8 into r768;
    shr r0.data3 r768 into r769;
    and r769 255u128 into r770;
    is.eq r770 0u128 into r771;
    is.eq r770 45u128 into r772;
    or r771 r772 into r773;
    is.eq r770 95u128 into r774;
    or r773 r774 into r775;
    gte r770 48u128 into r776;
    lte r770 57u128 into r777;
    and r776 r777 into r778;
    or r775 r778 into r779;
    gte r770 97u128 into r780;
    lte r770 122u128 into r781;
    and r780 r781 into r782;
    or r779 r782 into r783;
    not r783 into r784;
    mul 12u8 8u8 into r785;
    shr r0.data3 r785 into r786;
    and r786 255u128 into r787;
    is.eq r787 0u128 into r788;
    is.eq r787 45u128 into r789;
    or r788 r789 into r790;
    is.eq r787 95u128 into r791;
    or r790 r791 into r792;
    gte r787 48u128 into r793;
    lte r787 57u128 into r794;
    and r793 r794 into r795;
    or r792 r795 into r796;
    gte r787 97u128 into r797;
    lte r787 122u128 into r798;
    and r797 r798 into r799;
    or r796 r799 into r800;
    not r800 into r801;
    mul 13u8 8u8 into r802;
    shr r0.data3 r802 into r803;
    and r803 255u128 into r804;
    is.eq r804 0u128 into r805;
    is.eq r804 45u128 into r806;
    or r805 r806 into r807;
    is.eq r804 95u128 into r808;
    or r807 r808 into r809;
    gte r804 48u128 into r810;
    lte r804 57u128 into r811;
    and r810 r811 into r812;
    or r809 r812 into r813;
    gte r804 97u128 into r814;
    lte r804 122u128 into r815;
    and r814 r815 into r816;
    or r813 r816 into r817;
    not r817 into r818;
    mul 14u8 8u8 into r819;
    shr r0.data3 r819 into r820;
    and r820 255u128 into r821;
    is.eq r821 0u128 into r822;
    is.eq r821 45u128 into r823;
    or r822 r823 into r824;
    is.eq r821 95u128 into r825;
    or r824 r825 into r826;
    gte r821 48u128 into r827;
    lte r821 57u128 into r828;
    and r827 r828 into r829;
    or r826 r829 into r830;
    gte r821 97u128 into r831;
    lte r821 122u128 into r832;
    and r831 r832 into r833;
    or r830 r833 into r834;
    not r834 into r835;
    mul 15u8 8u8 into r836;
    shr r0.data3 r836 into r837;
    and r837 255u128 into r838;
    is.eq r838 0u128 into r839;
    is.eq r838 45u128 into r840;
    or r839 r840 into r841;
    is.eq r838 95u128 into r842;
    or r841 r842 into r843;
    gte r838 48u128 into r844;
    lte r838 57u128 into r845;
    and r844 r845 into r846;
    or r843 r846 into r847;
    gte r838 97u128 into r848;
    lte r838 122u128 into r849;
    and r848 r849 into r850;
    or r847 r850 into r851;
    not r851 into r852;
    ternary r852 false true into r853;
    ternary r835 false r853 into r854;
    ternary r818 false r854 into r855;
    ternary r801 false r855 into r856;
    ternary r784 false r856 into r857;
    ternary r767 false r857 into r858;
    ternary r750 false r858 into r859;
    ternary r733 false r859 into r860;
    ternary r716 false r860 into r861;
    ternary r699 false r861 into r862;
    ternary r682 false r862 into r863;
    ternary r665 false r863 into r864;
    ternary r648 false r864 into r865;
    ternary r631 false r865 into r866;
    ternary r614 false r866 into r867;
    ternary r597 false r867 into r868;
    mul 0u8 8u8 into r869;
    shr r0.data4 r869 into r870;
    and r870 255u128 into r871;
    is.eq r871 0u128 into r872;
    is.eq r871 45u128 into r873;
    or r872 r873 into r874;
    is.eq r871 95u128 into r875;
    or r874 r875 into r876;
    gte r871 48u128 into r877;
    lte r871 57u128 into r878;
    and r877 r878 into r879;
    or r876 r879 into r880;
    gte r871 97u128 into r881;
    lte r871 122u128 into r882;
    and r881 r882 into r883;
    or r880 r883 into r884;
    not r884 into r885;
    mul 1u8 8u8 into r886;
    shr r0.data4 r886 into r887;
    and r887 255u128 into r888;
    is.eq r888 0u128 into r889;
    is.eq r888 45u128 into r890;
    or r889 r890 into r891;
    is.eq r888 95u128 into r892;
    or r891 r892 into r893;
    gte r888 48u128 into r894;
    lte r888 57u128 into r895;
    and r894 r895 into r896;
    or r893 r896 into r897;
    gte r888 97u128 into r898;
    lte r888 122u128 into r899;
    and r898 r899 into r900;
    or r897 r900 into r901;
    not r901 into r902;
    mul 2u8 8u8 into r903;
    shr r0.data4 r903 into r904;
    and r904 255u128 into r905;
    is.eq r905 0u128 into r906;
    is.eq r905 45u128 into r907;
    or r906 r907 into r908;
    is.eq r905 95u128 into r909;
    or r908 r909 into r910;
    gte r905 48u128 into r911;
    lte r905 57u128 into r912;
    and r911 r912 into r913;
    or r910 r913 into r914;
    gte r905 97u128 into r915;
    lte r905 122u128 into r916;
    and r915 r916 into r917;
    or r914 r917 into r918;
    not r918 into r919;
    mul 3u8 8u8 into r920;
    shr r0.data4 r920 into r921;
    and r921 255u128 into r922;
    is.eq r922 0u128 into r923;
    is.eq r922 45u128 into r924;
    or r923 r924 into r925;
    is.eq r922 95u128 into r926;
    or r925 r926 into r927;
    gte r922 48u128 into r928;
    lte r922 57u128 into r929;
    and r928 r929 into r930;
    or r927 r930 into r931;
    gte r922 97u128 into r932;
    lte r922 122u128 into r933;
    and r932 r933 into r934;
    or r931 r934 into r935;
    not r935 into r936;
    mul 4u8 8u8 into r937;
    shr r0.data4 r937 into r938;
    and r938 255u128 into r939;
    is.eq r939 0u128 into r940;
    is.eq r939 45u128 into r941;
    or r940 r941 into r942;
    is.eq r939 95u128 into r943;
    or r942 r943 into r944;
    gte r939 48u128 into r945;
    lte r939 57u128 into r946;
    and r945 r946 into r947;
    or r944 r947 into r948;
    gte r939 97u128 into r949;
    lte r939 122u128 into r950;
    and r949 r950 into r951;
    or r948 r951 into r952;
    not r952 into r953;
    mul 5u8 8u8 into r954;
    shr r0.data4 r954 into r955;
    and r955 255u128 into r956;
    is.eq r956 0u128 into r957;
    is.eq r956 45u128 into r958;
    or r957 r958 into r959;
    is.eq r956 95u128 into r960;
    or r959 r960 into r961;
    gte r956 48u128 into r962;
    lte r956 57u128 into r963;
    and r962 r963 into r964;
    or r961 r964 into r965;
    gte r956 97u128 into r966;
    lte r956 122u128 into r967;
    and r966 r967 into r968;
    or r965 r968 into r969;
    not r969 into r970;
    mul 6u8 8u8 into r971;
    shr r0.data4 r971 into r972;
    and r972 255u128 into r973;
    is.eq r973 0u128 into r974;
    is.eq r973 45u128 into r975;
    or r974 r975 into r976;
    is.eq r973 95u128 into r977;
    or r976 r977 into r978;
    gte r973 48u128 into r979;
    lte r973 57u128 into r980;
    and r979 r980 into r981;
    or r978 r981 into r982;
    gte r973 97u128 into r983;
    lte r973 122u128 into r984;
    and r983 r984 into r985;
    or r982 r985 into r986;
    not r986 into r987;
    mul 7u8 8u8 into r988;
    shr r0.data4 r988 into r989;
    and r989 255u128 into r990;
    is.eq r990 0u128 into r991;
    is.eq r990 45u128 into r992;
    or r991 r992 into r993;
    is.eq r990 95u128 into r994;
    or r993 r994 into r995;
    gte r990 48u128 into r996;
    lte r990 57u128 into r997;
    and r996 r997 into r998;
    or r995 r998 into r999;
    gte r990 97u128 into r1000;
    lte r990 122u128 into r1001;
    and r1000 r1001 into r1002;
    or r999 r1002 into r1003;
    not r1003 into r1004;
    mul 8u8 8u8 into r1005;
    shr r0.data4 r1005 into r1006;
    and r1006 255u128 into r1007;
    is.eq r1007 0u128 into r1008;
    is.eq r1007 45u128 into r1009;
    or r1008 r1009 into r1010;
    is.eq r1007 95u128 into r1011;
    or r1010 r1011 into r1012;
    gte r1007 48u128 into r1013;
    lte r1007 57u128 into r1014;
    and r1013 r1014 into r1015;
    or r1012 r1015 into r1016;
    gte r1007 97u128 into r1017;
    lte r1007 122u128 into r1018;
    and r1017 r1018 into r1019;
    or r1016 r1019 into r1020;
    not r1020 into r1021;
    mul 9u8 8u8 into r1022;
    shr r0.data4 r1022 into r1023;
    and r1023 255u128 into r1024;
    is.eq r1024 0u128 into r1025;
    is.eq r1024 45u128 into r1026;
    or r1025 r1026 into r1027;
    is.eq r1024 95u128 into r1028;
    or r1027 r1028 into r1029;
    gte r1024 48u128 into r1030;
    lte r1024 57u128 into r1031;
    and r1030 r1031 into r1032;
    or r1029 r1032 into r1033;
    gte r1024 97u128 into r1034;
    lte r1024 122u128 into r1035;
    and r1034 r1035 into r1036;
    or r1033 r1036 into r1037;
    not r1037 into r1038;
    mul 10u8 8u8 into r1039;
    shr r0.data4 r1039 into r1040;
    and r1040 255u128 into r1041;
    is.eq r1041 0u128 into r1042;
    is.eq r1041 45u128 into r1043;
    or r1042 r1043 into r1044;
    is.eq r1041 95u128 into r1045;
    or r1044 r1045 into r1046;
    gte r1041 48u128 into r1047;
    lte r1041 57u128 into r1048;
    and r1047 r1048 into r1049;
    or r1046 r1049 into r1050;
    gte r1041 97u128 into r1051;
    lte r1041 122u128 into r1052;
    and r1051 r1052 into r1053;
    or r1050 r1053 into r1054;
    not r1054 into r1055;
    mul 11u8 8u8 into r1056;
    shr r0.data4 r1056 into r1057;
    and r1057 255u128 into r1058;
    is.eq r1058 0u128 into r1059;
    is.eq r1058 45u128 into r1060;
    or r1059 r1060 into r1061;
    is.eq r1058 95u128 into r1062;
    or r1061 r1062 into r1063;
    gte r1058 48u128 into r1064;
    lte r1058 57u128 into r1065;
    and r1064 r1065 into r1066;
    or r1063 r1066 into r1067;
    gte r1058 97u128 into r1068;
    lte r1058 122u128 into r1069;
    and r1068 r1069 into r1070;
    or r1067 r1070 into r1071;
    not r1071 into r1072;
    mul 12u8 8u8 into r1073;
    shr r0.data4 r1073 into r1074;
    and r1074 255u128 into r1075;
    is.eq r1075 0u128 into r1076;
    is.eq r1075 45u128 into r1077;
    or r1076 r1077 into r1078;
    is.eq r1075 95u128 into r1079;
    or r1078 r1079 into r1080;
    gte r1075 48u128 into r1081;
    lte r1075 57u128 into r1082;
    and r1081 r1082 into r1083;
    or r1080 r1083 into r1084;
    gte r1075 97u128 into r1085;
    lte r1075 122u128 into r1086;
    and r1085 r1086 into r1087;
    or r1084 r1087 into r1088;
    not r1088 into r1089;
    mul 13u8 8u8 into r1090;
    shr r0.data4 r1090 into r1091;
    and r1091 255u128 into r1092;
    is.eq r1092 0u128 into r1093;
    is.eq r1092 45u128 into r1094;
    or r1093 r1094 into r1095;
    is.eq r1092 95u128 into r1096;
    or r1095 r1096 into r1097;
    gte r1092 48u128 into r1098;
    lte r1092 57u128 into r1099;
    and r1098 r1099 into r1100;
    or r1097 r1100 into r1101;
    gte r1092 97u128 into r1102;
    lte r1092 122u128 into r1103;
    and r1102 r1103 into r1104;
    or r1101 r1104 into r1105;
    not r1105 into r1106;
    mul 14u8 8u8 into r1107;
    shr r0.data4 r1107 into r1108;
    and r1108 255u128 into r1109;
    is.eq r1109 0u128 into r1110;
    is.eq r1109 45u128 into r1111;
    or r1110 r1111 into r1112;
    is.eq r1109 95u128 into r1113;
    or r1112 r1113 into r1114;
    gte r1109 48u128 into r1115;
    lte r1109 57u128 into r1116;
    and r1115 r1116 into r1117;
    or r1114 r1117 into r1118;
    gte r1109 97u128 into r1119;
    lte r1109 122u128 into r1120;
    and r1119 r1120 into r1121;
    or r1118 r1121 into r1122;
    not r1122 into r1123;
    mul 15u8 8u8 into r1124;
    shr r0.data4 r1124 into r1125;
    and r1125 255u128 into r1126;
    is.eq r1126 0u128 into r1127;
    is.eq r1126 45u128 into r1128;
    or r1127 r1128 into r1129;
    is.eq r1126 95u128 into r1130;
    or r1129 r1130 into r1131;
    gte r1126 48u128 into r1132;
    lte r1126 57u128 into r1133;
    and r1132 r1133 into r1134;
    or r1131 r1134 into r1135;
    gte r1126 97u128 into r1136;
    lte r1126 122u128 into r1137;
    and r1136 r1137 into r1138;
    or r1135 r1138 into r1139;
    not r1139 into r1140;
    ternary r1140 false true into r1141;
    ternary r1123 false r1141 into r1142;
    ternary r1106 false r1142 into r1143;
    ternary r1089 false r1143 into r1144;
    ternary r1072 false r1144 into r1145;
    ternary r1055 false r1145 into r1146;
    ternary r1038 false r1146 into r1147;
    ternary r1021 false r1147 into r1148;
    ternary r1004 false r1148 into r1149;
    ternary r987 false r1149 into r1150;
    ternary r970 false r1150 into r1151;
    ternary r953 false r1151 into r1152;
    ternary r936 false r1152 into r1153;
    ternary r919 false r1153 into r1154;
    ternary r902 false r1154 into r1155;
    ternary r885 false r1155 into r1156;
    and r292 r580 into r1157;
    and r1157 r868 into r1158;
    and r1158 r1156 into r1159;
    output r1159 as boolean;


function initialize_collection:
    input r0 as u128.public;
    input r1 as u128.public;
    input r2 as BaseURI.public;
    assert.eq self.caller aleo1sr8d93usu395zc29qcl35ul2e7hl2538hl8pehe4ms88q4g70gxq3ffw0v;

    finalize r0 r1 r2;

finalize initialize_collection:
    input r0 as u128.public;
    input r1 as u128.public;
    input r2 as BaseURI.public;
    get.or_use toggle_settings[0u8] 0u32 into r3;
    and r3 1u32 into r4;
    assert.eq r4 0u32;
    set r0 into general_settings[0u8];
    set r0 into general_settings[1u8];
    set r1 into general_settings[2u8];
    set r2.data0 into general_settings[3u8];
    set r2.data1 into general_settings[4u8];
    set r2.data2 into general_settings[5u8];
    set r2.data3 into general_settings[6u8];
    set 1u32 into toggle_settings[0u8];
    set 0u32 into toggle_settings[1u8];


function set_mint_block:
    input r0 as u32.public;
    assert.eq self.caller aleo1sr8d93usu395zc29qcl35ul2e7hl2538hl8pehe4ms88q4g70gxq3ffw0v;

    finalize r0;

finalize set_mint_block:
    input r0 as u32.public;
    get toggle_settings[0u8] into r1;
    and r1 9u32 into r2;
    assert.eq r2 1u32;
    set r0 into toggle_settings[1u8];


function update_base_uri:
    input r0 as BaseURI.public;
    assert.eq self.caller aleo1sr8d93usu395zc29qcl35ul2e7hl2538hl8pehe4ms88q4g70gxq3ffw0v;

    finalize r0;

finalize update_base_uri:
    input r0 as BaseURI.public;
    get toggle_settings[0u8] into r1;
    and r1 9u32 into r2;
    assert.eq r2 1u32;
    set r0.data0 into general_settings[3u8];
    set r0.data1 into general_settings[4u8];
    set r0.data2 into general_settings[5u8];
    set r0.data3 into general_settings[6u8];


function update_toggle_settings:
    input r0 as u32.public;
    assert.eq self.caller aleo1sr8d93usu395zc29qcl35ul2e7hl2538hl8pehe4ms88q4g70gxq3ffw0v;

    finalize r0;

finalize update_toggle_settings:
    input r0 as u32.public;
    get toggle_settings[0u8] into r1;
    and r1 9u32 into r2;
    assert.eq r2 1u32;
    and r0 1u32 into r3;
    assert.eq r3 1u32;
    set r0 into toggle_settings[0u8];


function register:
    input r0 as Name.private;
    input r1 as address.private;
    input r2 as credits.aleo/credits.record;
    call validate_name r0 into r3;
    assert.eq r3 true;
    call credits.aleo/transfer_private_to_public r2 aleo1sr8d93usu395zc29qcl35ul2e7hl2538hl8pehe4ms88q4g70gxq3ffw0v 5000000u64 into r4;
    cast r0.data1 r0.data2 r0.data3 r0.data4 0field into r5 as TokenId;
    hash.psd2 r5 into r6 as field;    cast r1 r5 0scalar into r7 as NFT.record;
    output r7 as NFT.record;

    finalize r6 r5;

finalize register:
    input r0 as field.public;
    input r1 as TokenId.public;
    contains names[r0] into r2;
    assert.eq r2 false;
    get toggle_settings[1u8] into r3;
    lte r3 block.height into r4;
    assert.eq r4 true;
    get toggle_settings[0u8] into r5;
    and r5 11u32 into r6;
    assert.eq r6 3u32;
    set r1 into names[r0];


function register_sub:
    input r0 as Name.private;
    input r1 as address.private;
    input r2 as NFT.record;
    call validate_name r0 into r3;
    assert.eq r3 true;
    hash.psd2 r2.data into r4 as field;    cast r0.data1 r0.data2 r0.data3 r0.data4 r4 into r5 as TokenId;
    hash.psd2 r5 into r6 as field;    cast r1 r5 0scalar into r7 as NFT.record;
    cast r2.owner r2.data r2.edition into r8 as NFT.record;
    output r7 as NFT.record;
    output r8 as NFT.record;

    finalize r6 r5;

finalize register_sub:
    input r0 as field.public;
    input r1 as TokenId.public;
    contains names[r0] into r2;
    assert.eq r2 false;
    get toggle_settings[1u8] into r3;
    lte r3 block.height into r4;
    assert.eq r4 true;
    get toggle_settings[0u8] into r5;
    and r5 11u32 into r6;
    assert.eq r6 3u32;
    set r1 into names[r0];


function register_sub_public:
    input r0 as Name.private;
    input r1 as address.private;
    input r2 as field.private;
    call validate_name r0 into r3;
    assert.eq r3 true;
    cast r0.data1 r0.data2 r0.data3 r0.data4 r2 into r4 as TokenId;
    hash.psd2 r4 into r5 as field;    cast r1 r4 0scalar into r6 as NFT.record;
    output r6 as NFT.record;

    finalize r5 r4 self.caller;

finalize register_sub_public:
    input r0 as field.public;
    input r1 as TokenId.public;
    input r2 as address.public;
    get nft_owners[r1.parent] into r3;
    assert.eq r2 r3;
    contains names[r0] into r4;
    assert.eq r4 false;
    get toggle_settings[1u8] into r5;
    lte r5 block.height into r6;
    assert.eq r6 true;
    get toggle_settings[0u8] into r7;
    and r7 11u32 into r8;
    assert.eq r8 3u32;
    set r1 into names[r0];


function authorize:
    input r0 as NFT.record;

    finalize;

finalize authorize:
    assert.eq 0u8 1u8;


function burn:
    input r0 as NFT.record;
    hash.psd2 r0.data into r1 as field;
    finalize r1;

finalize burn:
    input r0 as field.public;
    remove names[r0];


function is_avaiable:
    input r0 as field.private;

    finalize r0;

finalize is_avaiable:
    input r0 as field.public;
    contains names[r0] into r1;
    assert.eq r1 false;


function transfer_private:
    input r0 as NFT.record;
    input r1 as address.private;
    cast r1 r0.data 0scalar into r2 as NFT.record;
    output r2 as NFT.record;


function transfer_public:
    input r0 as address.private;
    input r1 as field.private;

    finalize r0 r1 self.caller;

finalize transfer_public:
    input r0 as address.public;
    input r1 as field.public;
    input r2 as address.public;
    get nft_owners[r1] into r3;
    assert.eq r2 r3;
    set r0 into nft_owners[r1];


function convert_private_to_public:
    input r0 as NFT.record;
    hash.psd2 r0.data into r1 as field;
    finalize self.caller r1;

finalize convert_private_to_public:
    input r0 as address.public;
    input r1 as field.public;
    set r0 into nft_owners[r1];


function convert_public_to_private:
    input r0 as TokenId.private;
    hash.psd2 r0 into r1 as field;    cast self.caller r0 0scalar into r2 as NFT.record;
    output r2 as NFT.record;

    finalize self.caller r1;

finalize convert_public_to_private:
    input r0 as address.public;
    input r1 as field.public;
    get nft_owners[r1] into r2;
    assert.eq r0 r2;
    remove nft_owners[r1];


function set_primary_name:
    input r0 as field.private;

    finalize r0 self.caller;

finalize set_primary_name:
    input r0 as field.public;
    input r1 as address.public;
    get nft_owners[r0] into r2;
    assert.eq r1 r2;
    set r0 into primary_names[r1];


function unset_primary_name:

    finalize self.caller;

finalize unset_primary_name:
    input r0 as address.public;
    remove primary_names[r0];


function set_resolver:
    input r0 as field.private;
    input r1 as u128.private;
    input r2 as Name.private;
    cast r1 0u128 0u128 0u128 into r3 as Name;
    call validate_name r3 into r4;
    assert.eq r4 true;

    finalize r0 self.caller r1 r2;

finalize set_resolver:
    input r0 as field.public;
    input r1 as address.public;
    input r2 as u128.public;
    input r3 as Name.public;
    get nft_owners[r0] into r4;
    assert.eq r1 r4;
    cast r0 r2 into r5 as ResolverIndex;
    set r3 into resolvers[r5];


function unset_resolver:
    input r0 as field.private;
    input r1 as u128.private;

    finalize r0 self.caller r1;

finalize unset_resolver:
    input r0 as field.public;
    input r1 as address.public;
    input r2 as u128.public;
    get nft_owners[r0] into r3;
    assert.eq r1 r3;
    cast r0 r2 into r4 as ResolverIndex;
    remove resolvers[r4];
